plugins {
	id 'fabric-loom' version '1.11-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://maven.terraformersmc.com/releases" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}

task copyServerExecutable(type: Copy) {
    def serverBuildDir = file('../Server/MineLights/x64/Debug')

    doFirst {
        if (serverBuildDir.exists()) {
            println ">>> Found C++ build directory: ${serverBuildDir.absolutePath}"
        } else {
            println ">>> WARNING: C++ build directory not found at ${serverBuildDir.absolutePath}. The .exe will not be copied."
        }
    }

    onlyIf { serverBuildDir.exists() }
    
    from serverBuildDir
    include 'MineLights.exe'
    
    into layout.projectDirectory.dir('run/mods/MineLights')
}

task copyiCueSDK(type: Copy) {
	def rgbSDKiCueDir = file('../Server/MineLights/SKDs/')

    doFirst {
        if (rgbSDKiCueDir.exists()) {
            println ">>> Found rgbSDKiCueDir directory: ${rgbSDKiCueDir.absolutePath}"
        } else {
            println ">>> WARNING: rgbSDKiCueDir directory not found at ${rgbSDKiCueDir.absolutePath}. The .exe will not be copied."
        }
    }

    onlyIf { rgbSDKiCueDir.exists() }
    
	from rgbSDKiCueDir
    include 'CUESDK.x64_2019.dll'
    
    into layout.projectDirectory.dir('run/mods/MineLights')
}

task copyMSIMysticLightSDK(type: Copy) {
	def rgbSDKMSIMysticLightDir = file('../Server/MineLights/SDKs/')

    doFirst {
        if (rgbSDKMSIMysticLightDir.exists()) {
            println ">>> Found rgbSDKMSIMysticLightDir directory: ${rgbSDKMSIMysticLightDir.absolutePath}"
        } else {
            println ">>> WARNING: rgbSDKMSIMysticLightDir directory not found at ${rgbSDKMSIMysticLightDir.absolutePath}. The .exe will not be copied."
        }
    }

    onlyIf { rgbSDKMSIMysticLightDir.exists() }
    
	from rgbSDKMSIMysticLightDir
    include 'MysticLight_SDK_x64.dll'
    
    into layout.projectDirectory.dir('run/mods/MineLights')
}

tasks.named("runClient").configure {
    dependsOn copyServerExecutable
	dependsOn copyiCueSDK
	dependsOn copyMSIMysticLightSDK
}